apiVersion: influxdata.com/v2alpha1
kind: Label
metadata:
    name: dangerous-montalcini-d0a001
spec:
    color: '#E85B1C'
    name: meterly
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: admiring-fermat-d0a015
spec:
    associations:
        - kind: Label
          name: dangerous-montalcini-d0a001
    name: power_consumption_aggregated_yearly
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: festive-edison-d0a019
spec:
    associations:
        - kind: Label
          name: dangerous-montalcini-d0a001
    name: power_consumption_raw
    retentionRules:
        - everySeconds: 86400
          type: expire
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: goofy-zhukovsky-d0a009
spec:
    associations:
        - kind: Label
          name: dangerous-montalcini-d0a001
    name: power_consumption_aggregated_hourly
    retentionRules:
        - everySeconds: 2.592e+06
          type: expire
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: jovial-hellman-d0a005
spec:
    associations:
        - kind: Label
          name: dangerous-montalcini-d0a001
    name: power_consumption_aggregated_daily
    retentionRules:
        - everySeconds: 3.1536e+07
          type: expire
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: sweet-allen-d0a00d
spec:
    associations:
        - kind: Label
          name: dangerous-montalcini-d0a001
    name: power_consumption_aggregated_monthly
    retentionRules:
        - everySeconds: 3.1536e+07
          type: expire
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: vigilant-hugle-d0a011
spec:
    associations:
        - kind: Label
          name: dangerous-montalcini-d0a001
    name: power_consumption_aggregated_per_minute
    retentionRules:
        - everySeconds: 604800
          type: expire
---
apiVersion: influxdata.com/v2alpha1
kind: Task
metadata:
    name: amusing-chebyshev-10a005
spec:
    associations:
        - kind: Label
          name: dangerous-montalcini-d0a001
    cron: 0 0 1 * *
    name: 'Task: Aggregate data – montly'
    query: |-
        import "date"




        sourceBucket = "power_consumption_aggregated_daily"
        targetBucket = "power_consumption_aggregated_monthly"

        unit = 1mo
        stop = date.truncate(t: now(), unit: unit)
        start = date.sub(d: unit, from: stop)



        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "turns")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: sum, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)

        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "power_per_turn")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: mean, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)
---
apiVersion: influxdata.com/v2alpha1
kind: Task
metadata:
    name: confident-solomon-10a001
spec:
    associations:
        - kind: Label
          name: dangerous-montalcini-d0a001
    cron: '* * * * *'
    name: 'Task: Aggregate data – per minute'
    query: |-
        import "date"




        sourceBucket = "power_consumption_raw"
        targetBucket = "power_consumption_aggregated_per_minute"

        unit = 1m
        stop = date.truncate(t: now(), unit: unit)
        start = date.sub(d: unit, from: stop)



        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "turns")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: sum, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)

        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "power_per_turn")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: mean, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)
---
apiVersion: influxdata.com/v2alpha1
kind: Task
metadata:
    name: distracted-wozniak-d0a025
spec:
    associations:
        - kind: Label
          name: dangerous-montalcini-d0a001
    cron: 0 * * * *
    name: 'Task: Aggregate data – hourly'
    query: |-
        import "date"




        sourceBucket = "power_consumption_aggregated_per_minute"
        targetBucket = "power_consumption_aggregated_hourly"

        unit = 1h
        stop = date.truncate(t: now(), unit: unit)
        start = date.sub(d: unit, from: stop)



        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "turns")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: sum, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)

        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "power_per_turn")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: mean, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)
---
apiVersion: influxdata.com/v2alpha1
kind: Task
metadata:
    name: sloppy-lehmann-d0a01d
spec:
    associations:
        - kind: Label
          name: dangerous-montalcini-d0a001
    cron: 0 0 * * *
    name: 'Task: Aggregate data – daily'
    query: |-
        import "date"




        sourceBucket = "power_consumption_aggregated_hourly"
        targetBucket = "power_consumption_aggregated_daily"

        unit = 1d
        stop = date.truncate(t: now(), unit: unit)
        start = date.sub(d: unit, from: stop)



        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "turns")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: sum, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)

        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "power_per_turn")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: mean, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)
---
apiVersion: influxdata.com/v2alpha1
kind: Task
metadata:
    name: victorious-villani-d0a021
spec:
    associations:
        - kind: Label
          name: dangerous-montalcini-d0a001
    cron: 0 0 1 1 *
    name: 'Task: Aggregate data – yearly'
    query: |-
        import "date"




        sourceBucket = "power_consumption_aggregated_monthly"
        targetBucket = "power_consumption_aggregated_yearly"

        unit = 1y
        stop = date.truncate(t: now(), unit: unit)
        start = date.sub(d: unit, from: stop)



        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "turns")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: sum, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)

        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "power_per_turn")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: mean, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)
