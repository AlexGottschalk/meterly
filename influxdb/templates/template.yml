apiVersion: influxdata.com/v2alpha1
kind: Label
metadata:
    name: funny-jackson-40c001
spec:
    color: '#E85B1C'
    name: meterly
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: adventuring-ishizaka-40c003
spec:
    name: mybucket
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: blissful-lederberg-80c00f
spec:
    associations:
        - kind: Label
          name: funny-jackson-40c001
    name: power_consumption_aggregated_per_minute
    retentionRules:
        - everySeconds: 604800
          type: expire
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: competent-davinci-80c007
spec:
    associations:
        - kind: Label
          name: funny-jackson-40c001
    name: power_consumption_aggregated_hourly
    retentionRules:
        - everySeconds: 2.592e+06
          type: expire
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: crazy-elbakyan-80c013
spec:
    associations:
        - kind: Label
          name: funny-jackson-40c001
    name: power_consumption_aggregated_yearly
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: loving-gates-80c017
spec:
    associations:
        - kind: Label
          name: funny-jackson-40c001
    name: power_consumption_raw
    retentionRules:
        - everySeconds: 86400
          type: expire
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: rightful-kowalevski-80c00b
spec:
    associations:
        - kind: Label
          name: funny-jackson-40c001
    name: power_consumption_aggregated_monthly
    retentionRules:
        - everySeconds: 3.1536e+07
          type: expire
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: sweet-heisenberg-80c003
spec:
    associations:
        - kind: Label
          name: funny-jackson-40c001
    name: power_consumption_aggregated_daily
    retentionRules:
        - everySeconds: 3.1536e+07
          type: expire
---
apiVersion: influxdata.com/v2alpha1
kind: Task
metadata:
    name: compassionate-sammet-80c01b
spec:
    associations:
        - kind: Label
          name: funny-jackson-40c001
    cron: 0 0 1 1 *
    name: 'Task: Aggregate data – yearly'
    query: |-
        import "date"

        sourceBucket = "power_consumption_aggregated_monthly"
        targetBucket = "power_consumption_aggregated_yearly"

        unit = 1y
        stop = date.truncate(t: now(), unit: unit)
        start = date.sub(d: unit, from: stop)



        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "turns")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: sum, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)

        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "power_per_turn")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: mean, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)
---
apiVersion: influxdata.com/v2alpha1
kind: Task
metadata:
    name: rustling-galileo-80c02b
spec:
    associations:
        - kind: Label
          name: funny-jackson-40c001
    cron: '* * * * *'
    name: 'Task: Aggregate data – per minute'
    query: |-
        import "date"

        sourceBucket = "power_consumption_raw"
        targetBucket = "power_consumption_aggregated_per_minute"

        unit = 1m
        stop = date.truncate(t: now(), unit: unit)
        start = date.sub(d: unit, from: stop)



        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "turns")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: sum, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)

        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "power_per_turn")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: mean, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)
---
apiVersion: influxdata.com/v2alpha1
kind: Task
metadata:
    name: sad-euler-80c01f
spec:
    associations:
        - kind: Label
          name: funny-jackson-40c001
    cron: 0 0 * * *
    name: 'Task: Aggregate data – daily'
    query: |-
        import "date"

        sourceBucket = "power_consumption_aggregated_hourly"
        targetBucket = "power_consumption_aggregated_daily"

        unit = 1d
        stop = date.truncate(t: now(), unit: unit)
        start = date.sub(d: unit, from: stop)



        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "turns")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: sum, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)

        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "power_per_turn")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: mean, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)
---
apiVersion: influxdata.com/v2alpha1
kind: Task
metadata:
    name: serene-wright-80c023
spec:
    associations:
        - kind: Label
          name: funny-jackson-40c001
    cron: 0 * * * *
    name: 'Task: Aggregate data – hourly'
    query: |-
        import "date"

        sourceBucket = "power_consumption_aggregated_per_minute"
        targetBucket = "power_consumption_aggregated_hourly"

        unit = 1h
        stop = date.truncate(t: now(), unit: unit)
        start = date.sub(d: unit, from: stop)



        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "turns")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: sum, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)

        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "power_per_turn")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: mean, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)
---
apiVersion: influxdata.com/v2alpha1
kind: Task
metadata:
    name: wizardly-faraday-80c027
spec:
    associations:
        - kind: Label
          name: funny-jackson-40c001
    cron: 0 0 1 * *
    name: 'Task: Aggregate data – montly'
    query: |-
        import "date"

        sourceBucket = "power_consumption_aggregated_daily"
        targetBucket = "power_consumption_aggregated_monthly"

        unit = 1mo
        stop = date.truncate(t: now(), unit: unit)
        start = date.sub(d: unit, from: stop)



        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "turns")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: sum, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)

        from(bucket: sourceBucket)
            |> range(start: start, stop: stop)
            |> filter(fn: (r) => r["_field"] == "power_per_turn")
            |> truncateTimeColumn(unit: unit)
            |> aggregateWindow(every: unit, fn: mean, createEmpty: false)
            |> truncateTimeColumn(unit: unit)
            |> to(bucket: targetBucket)
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: sharp-wiles-c0c000
spec:
    language: flux
    name: listBuckets
    query: "buckets()\r\n    |> rename(columns: {\"name\": \"_value\"})\r\n    |> keep(columns: [\"_value\"])"
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: shiny-meitner-80c02f
spec:
    name: exampleVar
    selected:
        - first
    type: map
    values:
        first: -1d
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: trusting-bardeen-80c02d
spec:
    language: flux
    name: anotherVar
    query: "import \"dict\"\r\nimport \"testing\"\r\nimport \"array\"\r\nimport \"date\"\r\n\r\nd =\r\n    dict.fromList(\r\n        pairs: [{key: 1, value: \"foo\"}, {key: 2, value: \"bar\"}],\r\n    )// Returns [1: \"foo\", 2: \"bar\"]\r\n\r\ngot =\r\n    array.from(\r\n        rows: [\r\n            {table: 1, _field: \"t\", _value: date.sub(d: 15m, from: now())},\r\n            {table: 2, _field: \"u\", _value: date.sub(d: 30m, from: now())},\r\n            {table: 3, _field: \"v\", _value: date.sub(d: 45m, from: now())},\r\n        ],\r\n    )\r\n\r\ntesting.load(tables: got)"
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: vigorous-johnson-c0c002
spec:
    charts:
        - axes:
            - base: "10"
              name: x
              scale: linear
            - base: "10"
              label: Stromverbrauch
              name: "y"
              scale: linear
              suffix: ' U'
          colorizeRows: true
          colors:
            - hex: '#31C0F6'
              id: 3IYaZTPtsJJgKRv_DqKla
              name: Nineteen Eighty Four
              type: scale
            - hex: '#A500A5'
              id: 35d49iEmJTA7_C0jjP7GX
              name: Nineteen Eighty Four
              type: scale
            - hex: '#FF7E27'
              id: 5Q4yCKy3QMCe1Qy0HoX5k
              name: Nineteen Eighty Four
              type: scale
          generateYAxisTicks:
            - yTickStart
          geom: monotoneX
          height: 3
          heightRatio: 0.12532299741602068
          hoverDimension: auto
          kind: Xy
          legendColorizeRows: true
          legendOpacity: 0.95
          legendOrientationThreshold: -1
          name: Current power consumption (turns)
          opacity: 1
          orientationThreshold: 1e+08
          position: overlaid
          queries:
            - query: |-
                from(bucket: v.listBuckets)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "electricity_meter")
                  |> filter(fn: (r) => r["_field"] == "turns")
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> drop(columns: ["_measurement", "_start", "_stop", "location", "sensor_type"])
                  |> yield(name: "mean")
          shade: true
          staticLegend:
            colorizeRows: true
            heightRatio: 0.12532299741602068
            opacity: 1
            orientationThreshold: 1e+08
            valueAxis: "y"
            widthRatio: 1
          valueAxis: "y"
          width: 4
          widthRatio: 1
          xCol: _time
          yCol: _value
        - axes:
            - base: "10"
              name: x
              scale: linear
            - base: "10"
              label: Stromverbrauch
              name: "y"
              scale: linear
              suffix: ' U'
          colorizeRows: true
          colors:
            - hex: '#31C0F6'
              id: 55lqf-0-dXRCtztLoN8M7
              name: Nineteen Eighty Four
              type: scale
            - hex: '#A500A5'
              id: YpKM6felK55zICnEkpkfE
              name: Nineteen Eighty Four
              type: scale
            - hex: '#FF7E27'
              id: Xmo_jBewKPHTP-Z0oNirl
              name: Nineteen Eighty Four
              type: scale
          generateYAxisTicks:
            - yTickStart
          geom: monotoneX
          height: 3
          heightRatio: 0.12532299741602068
          hoverDimension: auto
          kind: Xy
          legendColorizeRows: true
          legendOpacity: 0.95
          legendOrientationThreshold: -1
          name: Power consumption per minute (turns)
          opacity: 1
          orientationThreshold: 1e+08
          position: overlaid
          queries:
            - query: |-
                from(bucket: "power_consumption_aggregated_per_minute")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "electricity_meter")
                  |> filter(fn: (r) => r["_field"] == "turns")
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> drop(columns: ["_measurement", "_start", "_stop", "location", "sensor_type"])
                  |> yield(name: "mean")
          shade: true
          staticLegend:
            colorizeRows: true
            heightRatio: 0.12532299741602068
            opacity: 1
            orientationThreshold: 1e+08
            widthRatio: 1
          width: 4
          widthRatio: 1
          xCol: _time
          yCol: _value
          yPos: 3
        - axes:
            - base: "10"
              name: x
              scale: linear
            - base: "2"
              label: Stromverbrauch
              name: "y"
              scale: linear
              suffix: ' kWh'
          colorizeRows: true
          colors:
            - hex: '#31C0F6'
              id: 3IYaZTPtsJJgKRv_DqKla
              name: Nineteen Eighty Four
              type: scale
            - hex: '#A500A5'
              id: 35d49iEmJTA7_C0jjP7GX
              name: Nineteen Eighty Four
              type: scale
            - hex: '#FF7E27'
              id: 5Q4yCKy3QMCe1Qy0HoX5k
              name: Nineteen Eighty Four
              type: scale
          generateYAxisTicks:
            - yTickStart
          geom: monotoneX
          height: 3
          hoverDimension: auto
          kind: Xy
          legendColorizeRows: true
          legendOpacity: 1
          legendOrientationThreshold: -1
          name: Current power consumption (kWh)
          opacity: 1
          orientationThreshold: 1e+08
          position: overlaid
          queries:
            - query: |-
                from(bucket: "power_consumption_raw")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "electricity_meter")
                  |> filter(fn: (r) => r["location"] == "home")
                  |> filter(fn: (r) => r["sensor_type"] == "TCRT5000")
                  |> filter(fn: (r) => r["_field"] == "turns" or r["_field"] == "power_per_turn")
                  |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
                  |> map(fn: (r) => ({ r with kilowatt_hours: float(v: float(v: r.turns) / float(v: r.power_per_turn)) }))
                  |> map(fn: (r) => ({ r with _value: r.kilowatt_hours }))
                  |> drop(columns: ["_measurement", "_start", "_stop", "location", "sensor_type"])
          shade: true
          staticLegend:
            colorizeRows: true
            opacity: 1
            orientationThreshold: 1e+08
            widthRatio: 1
          width: 4
          widthRatio: 1
          xCol: _time
          xPos: 4
          yCol: _value
    name: Test Dashboard
